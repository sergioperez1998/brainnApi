# -*- coding: utf-8 -*-

"""
brainnapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CreatePersonaRequest(object):

    """Implementation of the 'createPersonaRequest' model.

    TODO: type model description here.

    Attributes:
        codigo (int): TODO: type description here.
        nombre (string): TODO: type description here.
        apellido_1 (string): TODO: type description here.
        apellido_2 (string): TODO: type description here.
        activo (bool): TODO: type description here.
        externo (bool): TODO: type description here.
        advance (bool): TODO: type description here.
        fecha_nacimiento (string): TODO: type description here.
        foto (string): TODO: type description here.
        tipo_eval (string): TODO: type description here.
        disponible (bool): TODO: type description here.
        organizacion (int): TODO: type description here.
        usuario (int): TODO: type description here.
        centro_fisico (int): TODO: type description here.
        movilidad (list of int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "codigo": 'codigo',
        "nombre": 'nombre',
        "apellido_1": 'apellido1',
        "apellido_2": 'apellido2',
        "activo": 'activo',
        "externo": 'externo',
        "advance": 'advance',
        "fecha_nacimiento": 'fecha_nacimiento',
        "tipo_eval": 'tipo_eval',
        "disponible": 'disponible',
        "organizacion": 'organizacion',
        "usuario": 'usuario',
        "centro_fisico": 'centro_fisico',
        "movilidad": 'movilidad',
        "foto": 'foto'
    }

    def __init__(self,
                 codigo=None,
                 nombre=None,
                 apellido_1=None,
                 apellido_2=None,
                 activo=None,
                 externo=None,
                 advance=None,
                 fecha_nacimiento=None,
                 tipo_eval=None,
                 disponible=None,
                 organizacion=None,
                 usuario=None,
                 centro_fisico=None,
                 movilidad=None,
                 foto=None):
        """Constructor for the CreatePersonaRequest class"""

        # Initialize members of the class
        self.codigo = codigo
        self.nombre = nombre
        self.apellido_1 = apellido_1
        self.apellido_2 = apellido_2
        self.activo = activo
        self.externo = externo
        self.advance = advance
        self.fecha_nacimiento = fecha_nacimiento
        self.foto = foto
        self.tipo_eval = tipo_eval
        self.disponible = disponible
        self.organizacion = organizacion
        self.usuario = usuario
        self.centro_fisico = centro_fisico
        self.movilidad = movilidad

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        codigo = dictionary.get('codigo')
        nombre = dictionary.get('nombre')
        apellido_1 = dictionary.get('apellido1')
        apellido_2 = dictionary.get('apellido2')
        activo = dictionary.get('activo')
        externo = dictionary.get('externo')
        advance = dictionary.get('advance')
        fecha_nacimiento = dictionary.get('fecha_nacimiento')
        tipo_eval = dictionary.get('tipo_eval')
        disponible = dictionary.get('disponible')
        organizacion = dictionary.get('organizacion')
        usuario = dictionary.get('usuario')
        centro_fisico = dictionary.get('centro_fisico')
        movilidad = dictionary.get('movilidad')
        foto = dictionary.get('foto')

        # Return an object of this model
        return cls(codigo,
                   nombre,
                   apellido_1,
                   apellido_2,
                   activo,
                   externo,
                   advance,
                   fecha_nacimiento,
                   tipo_eval,
                   disponible,
                   organizacion,
                   usuario,
                   centro_fisico,
                   movilidad,
                   foto)
