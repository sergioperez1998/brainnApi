# -*- coding: utf-8 -*-

"""
brainnapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class UpdatePersonaRequest(object):

    """Implementation of the 'updatePersonaRequest' model.

    TODO: type model description here.

    Attributes:
        codigo (string): TODO: type description here.
        nombre (string): TODO: type description here.
        apellido_1 (string): TODO: type description here.
        apellido_2 (string): TODO: type description here.
        activo (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "codigo": 'codigo',
        "nombre": 'nombre',
        "apellido_1": 'apellido1',
        "apellido_2": 'apellido2',
        "activo": 'activo'
    }

    def __init__(self,
                 codigo=None,
                 nombre=None,
                 apellido_1=None,
                 apellido_2=None,
                 activo=None):
        """Constructor for the UpdatePersonaRequest class"""

        # Initialize members of the class
        self.codigo = codigo
        self.nombre = nombre
        self.apellido_1 = apellido_1
        self.apellido_2 = apellido_2
        self.activo = activo

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        codigo = dictionary.get('codigo')
        nombre = dictionary.get('nombre')
        apellido_1 = dictionary.get('apellido1')
        apellido_2 = dictionary.get('apellido2')
        activo = dictionary.get('activo')

        # Return an object of this model
        return cls(codigo,
                   nombre,
                   apellido_1,
                   apellido_2,
                   activo)
